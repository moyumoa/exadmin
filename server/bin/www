#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myproduct:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT);
app.set('port', process.env.PORT);


/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// Standard: 标准 ASCII 字体
// Slant: 斜体风格
// Doom: 类似于视频游戏《毁灭战士》中的字体
// Big: 大号字体
// Mini: 小号字体
// Banner: 用于横幅效果
// Bloody: 血腥效果
// Larry 3D: 3D 风格

const chalk = require('chalk');
const figlet = require('figlet');

const text = `${process.env.BASE_URL}`
const modifiedText = text.replace(/\./g, ' . ')
const uginxText = `
${chalk.cyan(figlet.textSync(modifiedText, { font: 'Standard' }))}

启动端口号 -- ${port} -- 运行环境 -- ${process.env.NODE_ENV}

`
console.log(uginxText);